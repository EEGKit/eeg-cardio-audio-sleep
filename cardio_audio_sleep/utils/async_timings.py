from mne.preprocessing.bads import _find_outliers
import numpy as np
from numpy.typing import NDArray


def generate_async_timings(
        sequence_timings: list,
        zscore: float = 4.0,
        ) -> NDArray[float]:
    """
    Given the sequence of timings of a synchronous block, generate the sequence
    of timings for the future asynchronous block(s).
    Outliers are removed based on Denis Engemann iterative Z-score method, and
    the asynchronous timing sequence is generated by randomizing the
    synchornous inter-stimuli timings.

    Parameters
    ----------
    sequence_timings : list
        List of timings at which an R-peak occured.
    zscore : float
        The value above which a feature is classified as outlier.

    Returns
    -------
    sequence_timings : array
        List of timings at which a stimuli occurs for the asynchronous blocks.
    """
    n = len(sequence_timings)
    diff = np.diff(sequence_timings)
    outliers = _find_outliers(diff, threshold=zscore, max_iter=3)
    valids = diff[~outliers]
    # generate sequence of 'n-1' valid inter-stimulus delays
    delays = np.random.choice(valids, size=n-1, replace=True)
    timings = np.zeros((n, ))
    for k, delay in enumerate(delays):
        timings[k+1] = timings[-1] + delay
    return timings
